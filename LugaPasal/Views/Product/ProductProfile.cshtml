@using LugaPasal.Entities
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> userManager
@model LugaPasal.Models.ProductProfileModel

@{
    User? user = null;
    bool IsAdmin = false;
    if (User?.Identity?.IsAuthenticated == true)
    {
        user = await userManager.GetUserAsync(User);
        if (user != null)
        {
            IsAdmin = await userManager.IsInRoleAsync(user, "Admin");
        }
    }


}
@if (TempData["SuccessMessage"] != null)
{
    <div class="notifications alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="notifications alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="row g-4 align-items-start p-4">

    <!-- Left: Product Image -->
    <div class="col-md-6 custom-card">
        <img src="@( !string.IsNullOrEmpty(Model.product.ProductImagePath)
                                                                                                                                                                    ? Model.product.ProductImagePath
                                                                                                                                                                    : Url.Content("~/images/icons/default.jpg") )"
             class="zoom-image img-fluid rounded"
             style="height:600px; width:100%; object-fit:contain;" />
    </div>

    <!-- Right: Product Details -->
    <div class="col-md-6 d-flex flex-column justify-content-between p-4 bg-light rounded shadow-sm h-100 border">
        <div>
            <div class="d-flex gap-5">
                <h2 class="fw-bold mb-3 text-uppercase border-bottom pb-2" style="letter-spacing:1px; font-size:2rem;font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif">
                    @Model.product.ProductName
                    <a asp-action="AddFavorites" asp-controller="User" asp-route-id="@Model.product.ProductID">
                        <img src="~/images/icons/download.svg" style="margin-bottom:10px;width:40px;height:40px;cursor:pointer" />
                    </a>
                </h2>
            </div>


            <p class="text-muted border-bottom pb-3 mb-4" style="line-height:1.6;font-size:0.95rem;">
                @{
                    if (!string.IsNullOrEmpty(Model.product.ProductDescription))
                    {
                        var description = Model.product.ProductDescription.Trim();
                        var formattedDescription = System.Text.RegularExpressions.Regex.Replace(
                        description,
                        @"(?<!^)\s*(\d\.)",
                        "<br><br>$1"
                        );
                        @Html.Raw(formattedDescription)

                    }
                    else
                    {
                        <span> No Description provided </span>
                    }
                }

            </p>

            <div class="mb-3 d-flex align-items-center gap-3">
                <p class="card-text text-black mt-auto text-uppercase" style="font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">💰 Price: @Model.product.ProductPrice 📦 Quantity: @Model.product.ProductQuantity</p>
            </div>
            <div class="mb-4 pb-3 border-bottom">
                <form asp-action="Ratings" asp-controller="Product" method="post">
                    <input type="hidden" name="ProductID" value="@Model.product.ProductID" />
                    @{
                        var averageRating = Model.product.Ratings != null && Model.product.Ratings.Any()
                        ? Model.product.Ratings.Average(r => r.RatingValue)
                        : 0.0;

                        var count = Model.product.Ratings != null && Model.product.Ratings.Any()
                        ? Model.product.Ratings.Count()
                        : 0;
                    }
                    <div class="d-flex align-items-center">
                        @for (int i = 1; i <= 5; i++)
                        {
                            string starClass;
                            if (i <= Math.Floor(averageRating))
                            {
                                starClass = "bi bi-star-fill text-warning";
                            }
                            else if (i - averageRating < 1)
                            {
                                starClass = "bi bi-star-half text-warning";
                            }
                            else
                            {
                                starClass = "bi bi-star text-warning ";
                            }
                            <button type="submit" name="ratingValue" value="@i" class="btn btn-link p-0 me-1 star-btn">
                                <i class="@starClass"></i>
                            </button>

                        }
                        <span class="ms-2 text-muted"> @averageRating.ToString("0.0")/5 </span>
                        <span class="ms-1 text-muted"> (@count) </span>
                        <div class="ms-3">
                            <a asp-action="PostReview" asp-controller="User" asp-route-id="@Model.product.ProductID" class="btn border1 text-uppercase hover-shadow shadow-sm text-black bg-warning" style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;font-size:12px; font-weight:500"> Review </a>
                        </div>
                    </div>

                </form>
            </div>

            <p class="text-muted small">
                <a asp-controller="User" asp-action="ProfileByOthers" asp-route-id="@Model.product.User.Id" class="text-decoration-none text-muted"> 👤 Posted By: <span class="fw-medium">@Model.product.User</span> </a>
            </p>
        </div>

        @if (user != null)
        {

            if (user.Id == Model.product.User.Id || IsAdmin)
            {
                <div class="d-flex justify-content-center ">
                    <a asp-controller="Product" asp-action="AddToCart" asp-route-id="@Model.product.ProductID" class="btn border-1 w-50 text-uppercase shadow-sm mt-3 hover-shadow bg-black text-white " style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;font-size: 13px;line-height: 20px;"> Add to Cart  </a>
                </div>
                <div class="d-flex">
                    <a asp-action="ListProducts" asp-controller="Product" class="btn border w-50 text-uppercase shadow-sm mt-3  hover-shadow" style=" font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;font-size: 13px;line-height: 20px; background-color:beige;">
                        ← Back to Products
                    </a>
                    <a asp-action="EditProduct" asp-controller="Product" asp-route-id="@Model.product.ProductID" class="btn border w-50 text-uppercase shadow-sm mt-3 hover-shadow" style=" font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;font-size: 13px;line-height: 20px; background-color:floralwhite"> Edit Product → </a>
                </div>
            }
            else
            {
                <div class="d-flex justify-content-center">
                    <a asp-action="ListProducts" asp-controller="Product" class="btn border w-50 text-uppercase shadow-sm mt-3  hover-shadow" style=" font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;font-size: 13px;line-height:20px;background-color:beige;">
                        ← Back to Products
                    </a>
                    <a asp-controller="Product" asp-action="AddToCart" asp-route-id="@Model.product.ProductID" class="btn border-1 w-50 text-uppercase shadow-sm mt-3 hover-shadow bg-black text-white " style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;font-size: 13px;line-height: 20px;"> Add to Cart  </a>
                </div>
            }
        }

    </div>

</div>
<div class="mt-5 mb-3 ms-4 border-bottom ">
    <h3 class="text-black text-uppercase" style="letter-spacing:0.6px;font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif"> You might like this </h3>
</div>
<div class="row g-3 ms-4 mb-4">
    @foreach (var product in Model.recommendedProducts)
    {

        <div class="col col-md-3">
            <a asp-action="ProductProfile" asp-controller="Product" asp-route-id="@product.ProductID" class="text-decoration-none">
                <div class="hover-shadow">
                    <div class="card shadow-sm hover-shadow product-card h-100 border-0" style="background-color: #f5f5f5;cursor:pointer;">
                        <div class="card-header bg-white p-0 text-center">
                            <img src="@( !string.IsNullOrEmpty(product.ProductImagePath)  ? product.ProductImagePath : Url.Content("~/images/profile/default.png"))"
                                 class="rounded-top w-100" style="height:200px; object-fit:contain" />
                        </div>
                        <div class="card-body p-3">
                            <h6 class="text-black" style="font-size:18px;font-weight:normal;letter-spacing:0.6px;line-height:12px; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
                                @product.ProductName
                            </h6>
                            <p class="card-text text-muted small card-text-clamp">
                                @(!string.IsNullOrEmpty(product.ProductDescription)
                                                            ? product.ProductDescription
                                                            : "No description available")
                        </p>
                    </div>
                </div>
            </div>

            </a>
        </div>

        }
</div>
<div class="mt-5 mb-3 ms-4 border-bottom">
    <h3 class="text-black text-uppercase" style="letter-spacing:0.6px;font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif"> Reviews</h3>
    @if (Model.reviews != null && Model.reviews.Any())
    {
        @foreach (var review in Model.reviews)
        {

            <div class="container border-bottom p-3">
                <div class="row" >
                    <div class="col-md-3 col-12">
                        <div class="d-flex flex-column gap-1 p-3" style="min-height:120px;background-color: #f5f5f5;">
                            <div class="d-flex gap-3">
                                <img src=" @(string.IsNullOrEmpty(review.User.ProfilePicturePath) ?Url.Content("~/images/icons/default.jpg"): review.User.ProfilePicturePath)" style="width:40px;height:40px;border-radius:30px;" class="shadow-sm" />
                                    <span class="mt-1" style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;font-size:20px"> @review.User.UserName </span>
                            </div>
                            <span class="text-muted small "> @review.User.Email</span>
                        </div>
                    </div>
                    <div class="col-md-9 col-12">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex gap-2">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    string starClass;
                                    if (i <= review.RatingValue)
                                    {
                                        starClass = "bi bi-star-fill text-warning";
                                    }
                                    else
                                    {
                                        starClass = "bi bi-star text-warning ";
                                    }

                                    <i class="@starClass"></i>

                                }
                            </div>
                                @if (review.CreatedAt != null)
                                {
                                    <span class="text-muted small">@review.CreatedAt.ToString("MM/dd/yyyy")</span>
                                }
                            </div>
                         
                        @if(review.Review!=null)
                            {
                                <span class="text-black" style="font-weight:400"> @review.Review</span>
                            }
                            else
                            {
                                <span class="text-muted"> No description of the review can be found!</span>
                            }
                        </div>
                        
                    </div>
                </div>

            @* </div> *@
        }

    }
    else
    {
        <div class="text-center text-muted my-4">
            <i class="bi bi-chat-left-text" style="font-size: 2rem;"></i>
            <p class="mt-2">No reviews available for this product yet.</p>
        </div>

    }
</div>
<style>

  

    .star-btn i:hover,
    .star-btn i:hover ~ i {
        color: #ffc107;
        cursor: pointer;
    }

    main {
        flex: 1;
        margin-bottom: 120px;
    }

    .custom-footer .bg-white {
        background-color: #f5f5f5 !important;
    }

    .custom-card {
        position: relative;
        overflow: hidden;
        border-radius: 12px;
        cursor: zoom-in;
    }

    zoom-image {
        width: 100%;
        height: auto;
        transition: transform 0.3s ease, transform-origin 0.3s ease; /* Transform just tells what type of change it is and transform-origin takes the point of zoom */
        transform-origin: center center; /* This makes it so that the default point of the zoom is the center of image when not hovering*/
    }
</style>
<script>
    const zoomContainer= document.querySelectorAll('.custom-card');

    zoomContainer.forEach(container => {
            const img= container.querySelector('.zoom-image');
            container.addEventListener('mousemove',(e) => {
                const rect= container.getBoundingClientRect();   /* Get thte total dimensions of the container on the screen */
                const x =((e.clientX-rect.left)/rect.width)*100 ;    /* Calculating x and u in percentage */
                const y= ((e.clientY - rect.top)/rect.height) *100;
                img.style.transformOrigin=`${x}% ${y}%`;
                img.style.transform='scale(2)';
            });

            container.addEventListener('mouseleave' ,() => {
                img.style.transformOrigin="center center";
                img.style.transform='scale(1)';
            });
    });
</script>


